import struct

# fmt: off
data = bytes([
        0x68, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x10, 0x00, 0x7d, 0xf3, 0x79, 0x00, 0x01, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00,
        0x47, 0x52, 0x55, 0x42, 0x20, 0x32, 0x2e, 0x30, 0x32, 0x7e, 0x62, 0x65, 0x74, 0x61, 0x33, 0x2d,
        0x35, 0x2b, 0x64, 0x65, 0x62, 0x39, 0x75, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0a, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0xf0, 0xdd, 0xd1, 0x00, 0x00,
        0x00, 0xf0, 0x00, 0xf0, 0x03, 0x00, 0xf0, 0xff, 0xf0, 0xff, 0xf0, 0xff, 0x00, 0x00, 0x00, 0x00,
        0x06, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xee, 0x07, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xfe, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x09, 0x00, 0x00, 0x00, 0xcc, 0x01, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
        0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00,
        0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00,
        0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00])
# fmt: on


def unpack_needed(fmt, buf):
    l = struct.calcsize(fmt)
    return struct.unpack(fmt, buf[:l])


def parse_fb_info(buf, size):
    return unpack_needed("<LLQLLLBBB", buf)


def parse_multiboot2(data):
    idx = 0
    dd = lambda: data[idx:]

    total_size, reserved = unpack_needed("<LL", dd())
    assert reserved == 0
    idx += 8

    t = -1
    while t != 0:

        t, s = unpack_needed("<LL", dd())
        idx += 8

        if t == 8:
            addr, pitch, width, height, bpp, fb_type, reserved = parse_fb_info(dd(), s)
            assert reserved == 0
            print(
                f"""
            addr:   {addr:02X}
            pitch:  {pitch}
            width:  {width}
            height: {height}
            bpp:    {bpp}
            type:   {fb_type}
            """
            )

        idx += s - 8
        idx += idx % 8


if __name__ == "__main__":
    with open("scratchpad/header.bin", "wb") as f:
        f.write(data)
    # parse_multiboot2(data)
